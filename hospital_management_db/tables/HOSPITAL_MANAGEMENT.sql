

-- Full DBA access



-- CREATE ALL TABLES

--NOTE : prefix:  hm_

-- Table 1: Departments (بخش‌های بیمارستان)
CREATE TABLE hm_departments (
    department_id INTEGER PRIMARY KEY,
    department_name VARCHAR2(100) NOT NULL,
    location VARCHAR2(50),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

h-- Table 2: Doctors (پزشکان)
CREATE TABLE  hm_doctors (
    doctor_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    specialty VARCHAR(100),
    department_id INTEGER,
    hire_date DATE,
    email VARCHAR(100) UNIQUE,
    salary DECIMAL(10,2),
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);


-- Table 3: Patients (بیماران)
CREATE TABLE hm_patients (
    patient_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    birth_date DATE,
    gender VARCHAR2(10) CHECK (gender IN ('MALE', 'FEMALE', 'OTHER')),
    phone_number VARCHAR2(15),
    address CLOB CHECK (address IS JSON),
    insurance_number VARCHAR2(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Table 4: Appointments (نوبت‌ها)
CREATE TABLE  hm_appointments (
    appointment_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    doctor_id INTEGER,
    appointment_date TIMESTAMP,
    status VARCHAR2(10)  DEFAULT 'SCHEDULED' CHECK (status in ('SCHEDULED', 'COMPLETED', 'CANCELLED' )),
    notes CLOB,
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 5: Prescriptions (نسخه‌ها)
CREATE TABLE  hm_prescriptions (
    prescription_id INTEGER PRIMARY KEY,
    appointment_id INTEGER,
    issue_date DATE,
    notes CLOB,
    FOREIGN KEY (appointment_id) REFERENCES hm_appointments(appointment_id)
);

-- Table 6: Medications (داروها)
CREATE TABLE  hm_medications (
    medication_id INTEGER PRIMARY KEY,
    medication_name VARCHAR(100) NOT NULL,
    description CLOB,
    unit_price DECIMAL(8,2),
    stock_quantity INTEGER,
    expiry_date DATE
);

-- Table 7: Prescription_Items (اقلام نسخه)
CREATE TABLE  hm_prescription_items (
    prescription_item_id INTEGER PRIMARY KEY,
    prescription_id INTEGER,
    medication_id INTEGER,
    quantity INTEGER,
    dosage_instructions VARCHAR(200),
    FOREIGN KEY (prescription_id) REFERENCES hm_prescriptions(prescription_id),
    FOREIGN KEY (medication_id) REFERENCES hm_medications(medication_id)
);

-- Table 8: Invoices (فاکتورها)
CREATE TABLE  hm_invoices (
    invoice_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    appointment_id INTEGER,
    total_amount NUMBER(10,2),
    issue_date DATE,
    is_paid char(1) DEFAULT 'N' check (is_paid in ('Y','N')),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (appointment_id) REFERENCES hm_appointments(appointment_id)
);

-- Table 9: Payments (پرداخت‌ها)
CREATE TABLE  hm_payments (
    payment_id INTEGER PRIMARY KEY,
    invoice_id INTEGER,
    amount NUMBER(10,2),
    payment_date TIMESTAMP,
    payment_method VARCHAR2(10) default 'CASH' check (payment_method in ('CASH', 'CARD', 'INSURANCE')),
    FOREIGN KEY (invoice_id) REFERENCES hm_invoices(invoice_id)
);

-- Table 10: Medical_Records (سوابق پزشکی)
CREATE TABLE  hm_medical_records (
    record_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    doctor_id INTEGER,
    record_date DATE,
    diagnosis CLOB,
    treatment_plan JSON, -- JSON for flexible treatment details
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 11: Equipment (تجهیزات)
CREATE TABLE  hm_equipment (
    equipment_id INTEGER PRIMARY KEY,
    equipment_name VARCHAR(100) NOT NULL,
    department_id INTEGER,
    purchase_date DATE,
    status VARCHAR2(15) default 'ACTIVE' CHECK (status in ('ACTIVE', 'MAINTENANCE', 'OUT_OF_SERVICE')) ,
    cost number(10,2),
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);
select * from hm_equipment;

-- Table 12: Staff (کارکنان غیرپزشک)
CREATE TABLE  hm_staff (
    staff_id INTEGER PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    role VARCHAR2(50),
    department_id INTEGER,
    hire_date DATE,
    salary number(10,2),
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);
-- Table 13:  hm_Shifts (شیفت‌ها)
CREATE TABLE shifts (
    shift_id INTEGER PRIMARY KEY,
    doctor_id INTEGER,
    staff_id INTEGER,
    shift_date DATE,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    shift_type VARCHAR2(10) CHECK ( shift_type  in( 'MORNING', 'EVENING', 'NIGHT')),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id),
    FOREIGN KEY (staff_id) REFERENCES hm_staff(staff_id)
);



-- Table 14: Lab_Tests (آزمایش‌های پزشکی)
CREATE TABLE  hm_lab_tests (
    test_id INTEGER PRIMARY KEY,
    patient_id INTEGER NOT NULL,
    doctor_id INTEGER,
    test_type VARCHAR2(100) NOT NULL, -- e.g., Blood Test, Urine Test
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR2(10) DEFAULT 'REQUESTED' check ( status in ( 'REQUESTED', 'COMPLETED', 'PENDING')) ,
    priority CHAR(1) DEFAULT 'N' CHECK (priority IN ('Y','N'))  , -- Urgent or not
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 15: Lab_Results (نتایج آزمایش‌ها)
CREATE TABLE  hm_lab_results (
    result_id INTEGER PRIMARY KEY,
    test_id INTEGER NOT NULL,
    result_date DATE,
    result_data JSON, -- Flexible storage for test results (e.g., {"hemoglobin": 14.2, "wbc": 7.5})
    notes clob,
    FOREIGN KEY (test_id) REFERENCES hm_lab_tests(test_id)
);

-- Table 16: Imaging_Records (سوابق تصویربرداری)
CREATE TABLE  hm_imaging_records (
    imaging_id INTEGER PRIMARY KEY,
    patient_id INTEGER NOT NULL,
    doctor_id INTEGER,
    imaging_type VARCHAR(50), -- e.g., MRI, CT, X-Ray
    imaging_date TIMESTAMP,
    image_file BLOB, -- For storing image data
    report CLOB, -- For detailed radiology report (CLOB for Oracle/MySQL)
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 17: Insurance_Providers (شرکت‌های بیمه)
CREATE TABLE  hm_insurance_providers (
    provider_id INTEGER PRIMARY KEY,
    provider_name VARCHAR(100) NOT NULL,
    contact_info JSON, -- e.g., {"phone": "123-456-7890", "email": "contact@ins.com"}
    contract_start_date DATE,
    contract_end_date DATE
);

-- Table 18: Insurance_Claims (ادعاهای بیمه)
CREATE TABLE  hm_insurance_claims (
    claim_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    invoice_id INTEGER,
    provider_id INTEGER,
    claim_amount number(10,2),
    claim_status varchar2(10)  DEFAULT 'SUBMITTED' check (claim_status in ('SUBMITTED', 'APPROVED', 'REJECTED')),
    submission_date DATE,
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (invoice_id) REFERENCES hm_invoices(invoice_id),
    FOREIGN KEY (provider_id) REFERENCES hm_insurance_providers(provider_id)
);

-- Table 19: Rooms (اتاق‌های بیمارستان)
CREATE TABLE  hm_rooms (
    room_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    room_number VARCHAR2(20) NOT NULL,
    room_type varchar2(10) check (room_type in ('ICU', 'GENERAL', 'SURGERY', 'PRIVATE')),
    capacity INTEGER, -- Number of beds
    is_occupied char(1)  DEFAULT 'N' check (is_occupied in('N','Y')) ,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 20: Beds (تخت‌ها)
CREATE TABLE  hm_beds (
    bed_id INTEGER PRIMARY KEY,
    room_id INTEGER,
    bed_number VARCHAR2(20),
    is_available char(1)  DEFAULT 'Y' check (is_available in('N','Y')) ,
    FOREIGN KEY (room_id) REFERENCES hm_rooms(room_id)
);

-- Table 21: Patient_Admissions (پذیرش بیماران)
CREATE TABLE  hm_patient_admissions (
    admission_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    room_id INTEGER,
    bed_id INTEGER,
    admission_date TIMESTAMP,
    discharge_date TIMESTAMP,
    reason clob,
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (room_id) REFERENCES hm_rooms(room_id),
    FOREIGN KEY (bed_id) REFERENCES hm_beds(bed_id)
);

-- Table 22: Pharmacy_Inventory (موجودی داروخانه)
CREATE TABLE  hm_pharmacy_inventory (
    inventory_id INTEGER PRIMARY KEY,
    medication_id INTEGER,
    batch_number VARCHAR2(50),
    quantity INTEGER,
    received_date DATE,
    expiry_date DATE,
    supplier_name VARCHAR2(100),
    FOREIGN KEY (medication_id) REFERENCES hm_medications(medication_id)
);

-- Table 23: Pharmacy_Transactions (تراکنش‌های داروخانه)
CREATE TABLE  hm_pharmacy_transactions (
    transaction_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medication_id INTEGER,
    quantity INTEGER,
    transaction_date TIMESTAMP,
    total_cost number(10,2),
    FOREIGN KEY (patient_id) REFERENCES  hm_patients(patient_id),
    FOREIGN KEY (medication_id) REFERENCES  hm_medications(medication_id)
);

-- Table 24: Staff_Training (آموزش کارکنان)
CREATE TABLE  hm_staff_training (
    training_id INTEGER PRIMARY KEY,
    staff_id INTEGER,
    training_name VARCHAR(100) NOT NULL,
    training_date DATE,
    duration_hours number(4,1),
    certificate_issued char(1) DEFAULT 'N' check(certificate_issued in ('N','Y'))  ,
    FOREIGN KEY (staff_id) REFERENCES hm_staff(staff_id)
);

-- Table 25: Performance_Reviews (ارزیابی عملکرد)
CREATE TABLE  hm_performance_reviews (
    review_id INTEGER PRIMARY KEY,
    staff_id INTEGER,
    doctor_id INTEGER, -- Optional, for doctor reviews
    review_date DATE,
    score INTEGER CHECK (score BETWEEN 1 AND 10),
    comments clob,
    FOREIGN KEY (staff_id) REFERENCES hm_staff(staff_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 26: Emergency_Cases (موارد اورژانسی)
CREATE TABLE  hm_emergency_cases (
    emergency_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    admission_id INTEGER,
    emergency_date TIMESTAMP,
    severity varchar2(6) check (severity in ('LOW', 'MEDIUM', 'HIGH')),
    response_team JSON, -- e.g., {"team_lead": "Dr. Smith", "members": ["Nurse A", "Nurse B"]}
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    FOREIGN KEY (admission_id) REFERENCES hm_patient_admissions(admission_id)
);

-- Table 27: Research_Projects (پروژه‌های تحقیقاتی)
CREATE TABLE  hm_research_projects (
    project_id INTEGER PRIMARY KEY,
    project_name VARCHAR2(200) NOT NULL,
    lead_doctor_id INTEGER,
    start_date DATE,
    end_date DATE,
    funding_amount number(12,2),
    description CLOB,
    FOREIGN KEY (lead_doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 28: Research_Data (داده‌های تحقیقاتی)
CREATE TABLE  hm_research_data (
    data_id INTEGER PRIMARY KEY,
    project_id INTEGER,
    patient_id INTEGER,
    data_type VARCHAR2(50), -- e.g., Clinical, Lab, Imaging
    data_content JSON, -- Flexible storage for research data
    collection_date DATE,
    FOREIGN KEY (project_id) REFERENCES hm_research_projects(project_id),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);




-- Table 29: Suppliers (تأمین‌کنندگان)
CREATE TABLE  hm_suppliers (
    supplier_id INTEGER PRIMARY KEY,
    supplier_name VARCHAR2(100) NOT NULL,
    contact_info JSON, -- e.g., {"phone": "123-456-7890", "email": "supplier@company.com"}
    address VARCHAR2(200),
    contract_start_date DATE
);

-- Table 30: Equipment_Orders (سفارشات تجهیزات)
CREATE TABLE  hm_equipment_orders (
    order_id INTEGER PRIMARY KEY,
    supplier_id INTEGER,
    equipment_id INTEGER,
    order_date DATE,
    quantity INTEGER,
    total_cost number(12,2),
    delivery_date DATE,
    FOREIGN KEY (supplier_id) REFERENCES hm_suppliers(supplier_id),
    FOREIGN KEY (equipment_id) REFERENCES hm_equipment(equipment_id)
);

-- Table 31: Online_Portal_Users (کاربران پورتال آنلاین)
CREATE TABLE  hm_online_portal_users (
    user_id INTEGER PRIMARY KEY, -- UUID for unique user IDs
    patient_id INTEGER,
    email VARCHAR2(100) UNIQUE,
    password_hash VARCHAR2(256),
    last_login TIMESTAMP,
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 32: Appointment_Requests (درخواست‌های نوبت آنلاین)
CREATE TABLE  hm_appointment_requests (
    request_id INTEGER PRIMARY KEY,
    user_id INTEGER,
    doctor_id INTEGER,
    preferred_date TIMESTAMP,
    request_status varchar2(10)DEFAULT 'PENDING' check ( request_status in ('PENDING', 'APPROVED', 'REJECTED')) ,
    FOREIGN KEY (user_id) REFERENCES hm_online_portal_users(user_id),
    FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 33: Notifications (اعلان‌ها)
CREATE TABLE  hm_notifications (
    notification_id INTEGER PRIMARY KEY,
    user_id INTEGER,
    patient_id INTEGER,
    notification_type varchar2(11) check ( notification_type in ('APPOINTMENT', 'BILLING', 'TEST_RESULT')) ,
    message clob,
    sent_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_read char(1) default 'N' check (is_read in ('N','Y')),
    FOREIGN KEY (user_id) REFERENCES hm_online_portal_users(user_id),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 34: Specialized_Units (واحدهای تخصصی)
CREATE TABLE  hm_specialized_units (
    unit_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    unit_name VARCHAR2(100), -- e.g., Cardiology, Oncology
    head_doctor_id INTEGER,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (head_doctor_id) REFERENCES hm_doctors(doctor_id)
);


-- Table 35: Clinical_Predictions (پیش‌بینی‌های کلینیکی)
CREATE TABLE  hm_clinical_predictions (
    prediction_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    prediction_date DATE,
    prediction_model VARCHAR2(100), -- e.g., "Heart Disease Risk Model"
    prediction_score number(5,2), -- e.g., 0.85
    prediction_data JSON, -- Model inputs/outputs
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 36: Budgets (بودجه‌ها)
CREATE TABLE  hm_budgets (
    budget_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    fiscal_year INTEGER,
    allocated_amount number(12,2),
    spent_amount number(12,2) DEFAULT 0,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);
-- Table 37: Cost_Centers (مراکز هزینه)
CREATE TABLE  hm_cost_centers (
    cost_center_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    cost_type VARCHAR2(50), -- e.g., Equipment, Staff, Supplies
    total_cost number(12,2),
    recorded_date DATE,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 38: Asset_Tracking (ردیابی دارایی‌ها)
CREATE TABLE  hm_asset_tracking (
    asset_id INTEGER PRIMARY KEY,
    equipment_id INTEGER,
    location GEOMETRY, -- For tracking equipment location (PostgreSQL/MySQL 8.0+)
    status varchar2(11) check(status in ('IN_USE', 'STORED', 'MAINTENANCE')),
    last_updated TIMESTAMP,
    FOREIGN KEY (equipment_id) REFERENCES hm_equipment(equipment_id)
);
select * from hm_asset_tracking;

-- Table 39: Maintenance_Logs (لاگ‌های تعمیرات)
CREATE TABLE  hm_maintenance_logs (
    maintenance_id INTEGER PRIMARY KEY,
    equipment_id INTEGER,
    maintenance_date DATE,
    description CLOB,
    cost number(10,2),
    performed_by VARCHAR2(100),
    FOREIGN KEY (equipment_id) REFERENCES hm_equipment(equipment_id)
);

-- Table 40: International_Patients (بیماران بین‌المللی)
CREATE TABLE  hm_international_patients (
    international_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    passport_number VARCHAR2(20) UNIQUE,
    visa_status varchar2(7) check (visa_status in ('VALID', 'EXPIRED', 'PENDING')),
    country VARCHAR2(50),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);



-- Table 41: Translators (مترجمان)
CREATE TABLE hm_translators (
    translator_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    languages CLOB, -- JSON can be stored as CLOB (or use BLOB if binary JSON needed)
    availability CHAR(1) DEFAULT 'Y' CHECK (availability IN ('Y','N'))
);

-- Table 42: Patient_Translator_Assignments (تخصیص مترجم)
CREATE TABLE hm_patient_translator_assignments (
    assignment_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    international_id NUMBER,
    translator_id NUMBER,
    assignment_date DATE,
    CONSTRAINT fk_pta_patient FOREIGN KEY (international_id) REFERENCES hm_international_patients(international_id),
    CONSTRAINT fk_pta_translator FOREIGN KEY (translator_id) REFERENCES hm_translators(translator_id)
);

-- Table 43: Residency_Programs (برنامه‌های رزیدنتی)
CREATE TABLE hm_residency_programs (
    program_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER,
    program_name VARCHAR2(100),
    start_date DATE,
    duration VARCHAR2(50), -- INTERVAL replaced with VARCHAR2
    CONSTRAINT fk_rp_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 44: Residents (رزیدنت‌ها)
CREATE TABLE hm_residents (
    resident_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    doctor_id NUMBER,
    program_id NUMBER,
    start_date DATE,
    completion_date DATE,
    CONSTRAINT fk_res_doctor FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id),
    CONSTRAINT fk_res_program FOREIGN KEY (program_id) REFERENCES hm_residency_programs(program_id)
);

-- Table 45: Incident_Reports (گزارش‌های حوادث)
CREATE TABLE hm_incident_reports (
    incident_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER,
    incident_date TIMESTAMP,
    incident_type VARCHAR2(50),
    description CLOB,
    severity VARCHAR2(10) CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH')),
    reported_by NUMBER,
    CONSTRAINT fk_ir_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    CONSTRAINT fk_ir_staff FOREIGN KEY (reported_by) REFERENCES hm_staff(staff_id)
);

-- Table 46: Safety_Protocols (پروتکل‌های ایمنی)
CREATE TABLE hm_safety_protocols (
    protocol_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER,
    protocol_name VARCHAR2(100),
    description CLOB,
    last_updated DATE,
    CONSTRAINT fk_sp_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 47: Patient_Feedback (بازخورد بیماران)
CREATE TABLE hm_patient_feedback (
    feedback_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER,
    appointment_id NUMBER,
    feedback_date DATE,
    rating NUMBER CHECK (rating BETWEEN 1 AND 5),
    comments CLOB,
    CONSTRAINT fk_pf_patient FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    CONSTRAINT fk_pf_appointment FOREIGN KEY (appointment_id) REFERENCES hm_appointments(appointment_id)
);

-- Table 48: Telemedicine_Sessions (جلسات تله‌مدیسین)
CREATE TABLE hm_telemedicine_sessions (
    session_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER,
    doctor_id NUMBER,
    session_date TIMESTAMP,
    platform VARCHAR2(50),
    duration_minutes NUMBER,
    CONSTRAINT fk_ts_patient FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
    CONSTRAINT fk_ts_doctor FOREIGN KEY (doctor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 49: Clinical_Trials (آزمایش‌های کلینیکی)
CREATE TABLE hm_clinical_trials (
    trial_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    project_id NUMBER,
    trial_name VARCHAR2(200),
    phase VARCHAR2(20),
    start_date DATE,
    end_date DATE,
    CONSTRAINT fk_ct_project FOREIGN KEY (project_id) REFERENCES hm_research_projects(project_id)
);

-- Table 50: Trial_Participants (شرکت‌کنندگان در آزمایش‌های کلینیکی)
CREATE TABLE hm_trial_participants (
    participant_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    trial_id NUMBER,
    patient_id NUMBER,
    enrollment_date DATE,
    status VARCHAR2(20) CHECK (status IN ('ACTIVE','WITHDRAWN','COMPLETED')),
    CONSTRAINT fk_tp_trial FOREIGN KEY (trial_id) REFERENCES hm_clinical_trials(trial_id),
    CONSTRAINT fk_tp_patient FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 51: Security Guards (نگهبانان حفاظت و حراست بیمارستان)
CREATE TABLE hm_security_guards (
    guard_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    shift_type VARCHAR2(20),
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_sg_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 52: Security Incidents (حوادث حفاظتی بیمارستان)
CREATE TABLE hm_security_incidents (
    incident_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    incident_date TIMESTAMP NOT NULL,
    description CLOB,
    severity_level VARCHAR2(10),
    reported_by VARCHAR2(100),
    resolved CHAR(1) DEFAULT 'N' CHECK (resolved IN ('Y','N')),
    resolution_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_si_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 53: Cleaning Staff (کارکنان خدمات و نظافت بیمارستان)
CREATE TABLE hm_cleaning_staff (
    staff_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    assigned_area VARCHAR2(100),
    shift_type VARCHAR2(20),
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_cs_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);
-- Table 54: Cleaning Schedules (برنامه‌های نظافت بیمارستان)
CREATE TABLE hm_cleaning_schedules (
    schedule_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    schedule_date DATE NOT NULL,
    area VARCHAR2(100),
    staff_id NUMBER,
    status VARCHAR2(20) DEFAULT 'PENDING',
    notes CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_csch_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    CONSTRAINT fk_csch_staff FOREIGN KEY (staff_id) REFERENCES hm_cleaning_staff(staff_id)
);


-- Table 55: Technical Staff (کارکنان فنی و تاسیسات بیمارستان)
CREATE TABLE hm_technical_staff (
    staff_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    specialty VARCHAR2(100),
    hire_date DATE,
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_ts_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 56: Maintenance Requests (درخواست‌های تعمیراتی تاسیسات بیمارستان)
CREATE TABLE hm_maintenance_requests (
    request_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    request_date TIMESTAMP NOT NULL,
    description CLOB,
    priority_level VARCHAR2(10),
    staff_id NUMBER,
    status VARCHAR2(20) DEFAULT 'PENDING',
    resolution_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_mr_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    CONSTRAINT fk_mr_staff FOREIGN KEY (staff_id) REFERENCES hm_technical_staff(staff_id)
);

-- Table 57: General Warehouses (انبارهای عمومی بیمارستان)
CREATE TABLE hm_general_warehouses (
    warehouse_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    location VARCHAR2(100),
    capacity NUMBER(10,2),
    current_stock NUMBER(10,2) DEFAULT 0,
    manager_name VARCHAR2(100),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_gw_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 58: Technical Inventories (انبارهای فنی بیمارستان)
CREATE TABLE hm_technical_inventories (
    inventory_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    item_name VARCHAR2(100) NOT NULL,
    quantity NUMBER,
    unit_price NUMBER(10,2),
    supplier_name VARCHAR2(100),
    expiry_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_ti_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 59: Pharmaceutical Warehouses (انبارهای دارویی بیمارستان)
CREATE TABLE hm_pharmaceutical_warehouses (
    warehouse_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    medication_id NUMBER,
    batch_number VARCHAR2(50),
    quantity NUMBER,
    expiry_date DATE,
    storage_condition VARCHAR2(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_pw_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 60: Cafeteria Staff (کارکنان سلف و آشپزخانه بیمارستان)
CREATE TABLE hm_cafeteria_staff (
    staff_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    role VARCHAR2(50),
    hire_date DATE,
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_cafeteria_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

select * from hm_cafeteria_staff;


SELECT constraint_name, table_name
FROM user_constraints
WHERE constraint_name = 'FK_CS_DEPARTMENT';

DROP TABLE hm_cafeteria_staff CASCADE CONSTRAINTS;



SELECT table_name 
FROM user_tables 
WHERE table_name = 'HM_DEPARTMENTS';

SELECT * FROM all_tab_privs WHERE table_name = 'HM_DEPARTMENTS';


-- Table 61: Meal Schedules (برنامه‌های غذایی سلف بیمارستان)
CREATE TABLE hm_meal_schedules (
    schedule_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    meal_date DATE NOT NULL,
    meal_type VARCHAR2(50),
    menu CLOB,
    cost NUMBER(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_ms_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 62: Staff Payrolls (حقوق و دستمزد کارکنان بیمارستان)
CREATE TABLE hm_staff_payrolls (
    payroll_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    staff_id NUMBER,
    salary_month DATE,
    base_salary NUMBER(10,2),
    bonuses NUMBER(10,2),
    deductions NUMBER(10,2),
    net_salary NUMBER(10,2),
    paid CHAR(1) DEFAULT 'N' CHECK (paid IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

SELECT table_name 
FROM user_tables 
WHERE table_name = 'HM_DEPARTMENTS';

SELECT constraint_name, constraint_type
FROM user_constraints
WHERE table_name = 'HM_DEPARTMENTS';


SELECT table_name 
FROM user_tables 
WHERE table_name = 'HM_STAFF_PAYROLLS';



-- Table 63: Staff Benefits (سنوات و مزایای کارکنان بیمارستان)
CREATE TABLE hm_staff_benefits (
    benefit_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    staff_id NUMBER,
    benefit_type VARCHAR2(50),
    amount NUMBER(10,2),
    benefit_date DATE,
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_sb_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);


-- Table 64: Purchase Orders (سفارشات خرید بیمارستان)
CREATE TABLE hm_purchase_orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    supplier_name VARCHAR2(100),
    order_date DATE,
    item_description CLOB,
    quantity NUMBER,
    total_cost NUMBER(10,2),
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_po_department FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

select * from hm_procurement_logs;

-- Table 65: Procurement Logs
CREATE TABLE hm_procurement_logs (
    log_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    order_id NUMBER,
    log_date TIMESTAMP,
    description CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_procurement_department FOREIGN KEY (department_id) 
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_procurement_order FOREIGN KEY (order_id) 
        REFERENCES hm_purchase_orders(order_id)
);

-- Table 66: Vehicles
CREATE TABLE hm_vehicles (
    vehicle_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    vehicle_type VARCHAR2(50),
    license_plate VARCHAR2(20),
    model VARCHAR2(50),
    purchase_date DATE,
    mileage NUMBER(10,2),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_vehicles_department FOREIGN KEY (department_id) 
        REFERENCES hm_departments(department_id)
);

-- Table 67: Ambulance Missions
CREATE TABLE hm_ambulance_missions (
    mission_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    vehicle_id NUMBER,
    mission_date TIMESTAMP,
    destination VARCHAR2(100),
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_missions_department FOREIGN KEY (department_id) 
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_missions_vehicle FOREIGN KEY (vehicle_id) 
        REFERENCES hm_vehicles(vehicle_id)
);

-- Table 68: IT Staff
CREATE TABLE hm_it_staff (
    staff_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    role VARCHAR2(50),
    hire_date DATE,
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_it_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 69: Software Licenses
CREATE TABLE hm_software_licenses (
    license_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    software_name VARCHAR2(100),
    license_key VARCHAR2(50),
    expiry_date DATE,
    cost NUMBER(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_license_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 70: Marketing Campaigns
CREATE TABLE hm_marketing_campaigns (
    campaign_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    campaign_name VARCHAR2(100),
    start_date DATE,
    end_date DATE,
    target_audience VARCHAR2(100),
    budget NUMBER(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_campaign_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 71: International Patient Leads
CREATE TABLE hm_international_patient_leads (
    lead_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    lead_name VARCHAR2(100),
    country VARCHAR2(50),
    contact_email VARCHAR2(100),
    lead_date DATE,
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_leads_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 72: Department Managers
CREATE TABLE hm_department_managers (
    manager_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_manager_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 73: Department Performance Reviews
CREATE TABLE hm_department_performance_reviews (
    review_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    review_date DATE,
    score NUMBER(5,2),
    comments CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_review_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 74: Nurses (پرستاران بیمارستان)
CREATE TABLE hm_nurses (
    nurse_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    license_number VARCHAR2(20),
    shift_type VARCHAR2(20),
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_nurses_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);


-- Table 75: Nurse Assignments (تخصیص پرستاران به بیماران)
CREATE TABLE hm_nurse_assignments (
    assignment_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    nurse_id NUMBER,
    patient_id NUMBER,
    assignment_date DATE NOT NULL,
    task_description VARCHAR2(200),
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_nurse_assign_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_nurse_assignment_nurse FOREIGN KEY (nurse_id)
        REFERENCES hm_nurses(nurse_id),
    CONSTRAINT fk_nurse_assignment_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id)
);
-- Table 76: Emergency Cases (موارد اورژانسی بیمارستان)
CREATE TABLE hm_emergency_cases (
    case_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    patient_id NUMBER,
    emergency_date TIMESTAMP NOT NULL,
    severity_level VARCHAR2(10) CHECK (severity_level IN ('LOW','MEDIUM','HIGH')),
    description CLOB,
    status VARCHAR2(20) DEFAULT 'OPEN',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_emergency_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_emergency_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id)
);

-- Table 77: Emergency Teams (تیم‌های پاسخ اورژانس بیمارستان)
CREATE TABLE hm_emergency_teams (
    team_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    team_name VARCHAR2(100),
    leader_id NUMBER,
    member_count NUMBER,
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_emergency_team_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_emergency_team_leader FOREIGN KEY (leader_id)
        REFERENCES hm_doctors(doctor_id)
);



-- Table 78: Radiology Scans (اسکن‌های رادیولوژی بیمارستان)
CREATE TABLE hm_radiology_scans 
( scan_id INTEGER PRIMARY KEY, department_id INTEGER NOT NULL,
patient_id INTEGER,
scan_type VARCHAR2(50) CHECK (scan_type IN ('XRAY', 'CT', 'MRI', 'ULTRASOUND')),
scan_date TIMESTAMP NOT NULL,
result JSON,
technician_id INTEGER, 
status VARCHAR2(20) DEFAULT 'PENDING',
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id),
FOREIGN KEY (technician_id) REFERENCES hm_radiology_technicians(technician_id) );


-- Table 79: Radiology Technicians (تکنسین‌های رادیولوژی بیمارستان)
CREATE TABLE hm_radiology_technicians (
    technician_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    certification_number VARCHAR2(20),
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_technicians_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);
select * from hm_radiology_technicians;

-- Table 80: Surgeries (جراحی‌های بیمارستان)
CREATE TABLE hm_surgeries (
    surgery_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    patient_id NUMBER,
    doctor_id NUMBER,
    operating_room_id NUMBER,
    surgery_date TIMESTAMP NOT NULL,
    surgery_type VARCHAR2(100),
    status VARCHAR2(20) DEFAULT 'SCHEDULED',
    outcome CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_surgery_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_surgery_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id),
    CONSTRAINT fk_surgery_doctor FOREIGN KEY (doctor_id)
        REFERENCES hm_doctors(doctor_id),
    CONSTRAINT fk_surgery_room FOREIGN KEY (operating_room_id)
        REFERENCES hm_operating_rooms(operating_room_id)
);

-- Table 81: Operating Rooms (اتاق‌های عمل بیمارستان)
CREATE TABLE hm_operating_rooms (
    operating_room_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    room_number VARCHAR2(20),
    equipment_details CLOB,
    is_available CHAR(1) DEFAULT 'Y' CHECK (is_available IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_room_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);

-- Table 82: Prescriptions (نسخه‌های دارویی بیمارستان)
CREATE TABLE hm_prescriptions_all (
    prescription_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    patient_id NUMBER,
    doctor_id NUMBER,
    medication_id NUMBER,
    prescription_date DATE NOT NULL,
    dosage VARCHAR2(100),
    duration_days NUMBER,
    status VARCHAR2(20) DEFAULT 'ACTIVE',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_prescription_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_prescription_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id),
    CONSTRAINT fk_prescription_doctor FOREIGN KEY (doctor_id)
        REFERENCES hm_doctors(doctor_id),
    CONSTRAINT fk_prescription_medication FOREIGN KEY (medication_id)
        REFERENCES hm_medications(medication_id)
);

-- Table 83: Pharmacy Transactions (تراکنش‌های داروخانه بیمارستان)
CREATE TABLE hm_pharmacy_transactions_all (
    transaction_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    prescription_id NUMBER,
    patient_id NUMBER,
    dispensed_date TIMESTAMP NOT NULL,
    quantity NUMBER,
    total_cost NUMBER(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_pharmacy_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_pharmacy_prescription FOREIGN KEY (prescription_id)
        REFERENCES hm_prescriptions(prescription_id),
    CONSTRAINT fk_pharmacy_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id)
);



-- Table 84: Physiotherapy Sessions (جلسات فیزیوتراپی بیمارستان)
CREATE TABLE hm_physiotherapy_sessions (
    session_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    patient_id NUMBER,
    physiotherapist_id NUMBER,
    session_date TIMESTAMP NOT NULL,
    treatment_plan CLOB,
    duration_minutes NUMBER,
    status VARCHAR2(20) DEFAULT 'SCHEDULED',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_physiotherapy_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id),
    CONSTRAINT fk_physiotherapy_patient FOREIGN KEY (patient_id)
        REFERENCES hm_patients(patient_id),
    CONSTRAINT fk_physiotherapy_physio FOREIGN KEY (physiotherapist_id)
        REFERENCES hm_physiotherapists(physiotherapist_id)
);


select * from hm_physiotherapy_sessions;



SELECT table_name 
FROM user_tables 
WHERE table_name = 'HM_PHYSIOTHERAPISTS';



-- Table 90: Quality Audits (ممیزی‌های کیفیت بیمارستان)
CREATE TABLE hm_quality_audits (
    audit_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    audit_date DATE NOT NULL,
    standard_name VARCHAR2(100),
    compliance_score DECIMAL(5,2),
    findings JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 91: Compliance Checklists (چک‌لیست‌های انطباق بیمارستان)
CREATE TABLE hm_compliance_checklists (
    checklist_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    checklist_name VARCHAR2(100),
    creation_date DATE,
    items JSON,
    completion_status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 92: Beds (تخت‌های بیمارستان)
CREATE TABLE hm_beds_all (
    bed_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    room_id INTEGER,
    bed_number VARCHAR2(20),
    bed_type VARCHAR2(50),
    is_available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (room_id) REFERENCES hm_rooms(room_id)
);

-- Table 93: Room Allocations (تخصیص اتاق‌های بیمارستان)
CREATE TABLE hm_room_allocations (
    allocation_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    room_id INTEGER,
    patient_id INTEGER,
    allocation_date TIMESTAMP NOT NULL,
    discharge_date TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'OCCUPIED',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (room_id) REFERENCES hm_rooms(room_id),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 94: Interns (کارآموزان پزشکی بیمارستان)
CREATE TABLE hm_interns (
    intern_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    start_date DATE,
    university_name VARCHAR2(100),
    contact_number VARCHAR2(15),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 95: Training Schedules (برنامه‌های کارآموزی پزشکی بیمارستان)
CREATE TABLE hm_training_schedules (
    schedule_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    intern_id INTEGER,
    training_date DATE NOT NULL,
    supervisor_id INTEGER,
    task_description clob,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (intern_id) REFERENCES hm_interns(intern_id),
    FOREIGN KEY (supervisor_id) REFERENCES hm_doctors(doctor_id)
);

-- Table 96: Waste Disposal Logs (لاگ‌های دفع پسماند بیمارستان)
CREATE TABLE hm_waste_disposal_logs (
    log_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    waste_type_id INTEGER,
    disposal_date TIMESTAMP NOT NULL,
    quantity_kg DECIMAL(10,2),
    disposal_method VARCHAR2(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (waste_type_id) REFERENCES hm_waste_types(waste_type_id)
);

-- Table 97: Waste Types (انواع پسماند بیمارستان)
CREATE TABLE hm_waste_types (
    waste_type_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    waste_name VARCHAR2(100),
    hazard_level VARCHAR2(20) CHECK (hazard_level IN ('LOW', 'MEDIUM', 'HIGH')),
    handling_instructions clob,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 98: Donations (کمک‌های خیریه بیمارستان)
CREATE TABLE hm_donations (
    donation_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    donor_name VARCHAR2(100),
    donation_amount DECIMAL(10,2),
    donation_date DATE NOT NULL,
    purpose VARCHAR2(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 99: Charity Cases (موارد خیریه بیماران بیمارستان)
CREATE TABLE hm_charity_cases (
    case_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    patient_id INTEGER,
    case_date DATE NOT NULL,
    approved_amount number(10,2),
    status VARCHAR2(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id),
    FOREIGN KEY (patient_id) REFERENCES hm_patients(patient_id)
);

-- Table 100: Energy Usage Logs (لاگ‌های مصرف انرژی بیمارستان)
CREATE TABLE hm_energy_usage_logs (
    log_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    log_date TIMESTAMP NOT NULL,
    energy_type VARCHAR2(50) CHECK (energy_type IN ('ELECTRICITY', 'WATER', 'GAS')),
    consumption number(10,2),
    cost number(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);

-- Table 101: Sustainability Initiatives (ابتکارات پایداری بیمارستان)
CREATE TABLE hm_sustainability_initiatives (
    initiative_id INTEGER PRIMARY KEY,
    department_id INTEGER NOT NULL,
    initiative_name VARCHAR2(100),
    start_date DATE,
    end_date DATE,
    budget number(10,2),
    impact_report JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);




-- Table 102: Hospital Entities (موجودیت‌های بیمارستان)
CREATE TABLE hm_hospital_entities (
    entity_id INTEGER PRIMARY KEY,
    entity_type VARCHAR2(50) NOT NULL CHECK (entity_type IN ('PATIENT', 'DOCTOR', 'NURSE', 'ROOM', 'EQUIPMENT', 'SURGERY', 'VEHICLE', 'STAFF', 'OTHER', 'MEDICAL_RECORD', 'LAB_TEST', 'LAB_RESULT', 'DISEASE_CASE', 'INFECTIOUS_DISEASE', 'CLINICAL_GUIDELINE', 'GUIDELINE_IMPLEMENTATION', 'PATIENT_CONSENT', 'TELEMEDICINE_SESSION', 'PATIENT_FEEDBACK', 'INVOICE', 'PAYMENT', 'INSURANCE_CLAIM', 'FINANCIAL_PREDICTION', 'BUDGET', 'HOSPITAL_EVENT', 'NOTIFICATION', 'ASSET_TRACKING', 'DYNAMIC_SHIFT_ASSIGNMENT', 'SHIFT', 'ONLINE_PORTAL_USER', 'PORTAL_CONSENT', 'RESEARCH_PROJECT', 'RESEARCH_RESOURCE_ALLOCATION', 'RESEARCH_RESOURCE', 'CLINICAL_PREDICTION', 'HOSPITAL_GRAPH_NODE', 'HOSPITAL_GRAPH_EDGE', 'SECURITY_GUARD', 'SECURITY_INCIDENT', 'CLEANING_STAFF', 'CLEANING_SCHEDULE', 'TECHNICAL_STAFF', 'MAINTENANCE_REQUEST', 'GENERAL_WAREHOUSE', 'TECHNICAL_INVENTORY', 'PHARMACEUTICAL_WAREHOUSE', 'CAFETERIA_STAFF', 'MEAL_SCHEDULE', 'STAFF_PAYROLL', 'STAFF_BENEFIT', 'PURCHASE_ORDER', 'PROCUREMENT_LOG', 'VEHICLE', 'AMBULANCE_MISSION', 'IT_STAFF', 'SOFTWARE_LICENSE', 'MARKETING_CAMPAIGN', 'INTERNATIONAL_PATIENT_LEAD', 'DEPARTMENT_MANAGER', 'DEPARTMENT_PERFORMANCE_REVIEW', 'RADIOLOGY_SCAN', 'RADIOLOGY_TECHNICIAN', 'PHYSIOTHERAPY_SESSION', 'PHYSIOTHERAPIST', 'EMPLOYEE_RECORD', 'TRAINING_PROGRAM', 'CUSTOMER_COMPLAINT', 'PATIENT_SATISFACTION_SURVEY', 'QUALITY_AUDIT', 'COMPLIANCE_CHECKLIST', 'BED', 'ROOM_ALLOCATION', 'INTERN', 'TRAINING_SCHEDULE', 'WASTE_DISPOSAL_LOG', 'WASTE_TYPE', 'DONATION', 'CHARITY_CASE', 'ENERGY_USAGE_LOG', 'SUSTAINABILITY_INITIATIVE', 'LOG')),
    entity_ref_id INTEGER NOT NULL,
    department_id INTEGER,
    entity_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (department_id) REFERENCES hm_departments(department_id)
);


-- Table 103: Hospital Entities (بخش فیزیوتراپی های بیمارستان)

CREATE TABLE hm_physiotherapists (
    physiotherapist_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_id NUMBER NOT NULL,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    hire_date DATE,
    certification_number VARCHAR2(20),
    contact_number VARCHAR2(15),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y','N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_physio_department FOREIGN KEY (department_id)
        REFERENCES hm_departments(department_id)
);









